import "compiler-old.mm1";

-- inductive epilogue
-- | free : nat -> epilogue -> epilogue
-- | pop : regnum -> epilogue -> epilogue
-- | ret : epilogue
@mmc-th local def epiFree (n: nat) (epi: nat): nat = $ 0 $; -- TODO
@mmc-th local def epiPop (reg: hex) (epi: nat): nat = $ 0 $; -- TODO
@mmc-th local def epiRet: nat = $ 0 $; -- TODO

--| Procedure-global context, constructor for `pctx1` type.
--| * `start`: the address of the procedure entry point
--| * `ret`: the return ABI
--| * `epi: epilogue`: the epilogue sequence
@mmc-th local def mkPCtx1 (start: nat) (ret: set) (epi: nat): set =
$ Sum ret (start <> epi) $;

--| Procedure-global context, constructor for `pctx := gctx * pctx1` type.
--| We write it in such a way that `pctx` extends `gctx`,
--| so `gctx` extraction functions also work on `pctx`.
@mmc-th local def mkPCtx (gctx pctx1: set): set =
$ Sum (Fst gctx) (Sum pctx1 0) $;

local def okStartN (pctx: set): nat = $ fst (lower (Snd (Fst (Snd pctx)))) $;

--| Block-local context. In lean:
--| ```lean
--| structure bctx := (G : pctx) (labs : list label_group)
--| ```
--| We write it in such a way that `bctx` extends `pctx`,
--| so `pctx` extraction functions also work on `bctx`.
@mmc-th local def mkBCtx (pctx labs: set): set = $ Sum (Fst pctx) (Sum (Fst (Snd pctx)) labs) $;

@mmc-th theorem okContentBI: $ okContent (mkBCtx (mkPCtx (mkGCtx c T) P) L) c $ = 'sorry;

local def okLabelGroupsN (pctx: set): set = $ Snd (Snd pctx) $;
@mmc-th local def okLabelGroups (pctx labs: set): wff = $ okLabelGroupsN pctx == labs $;
@mmc-th theorem okLabelGroupsI: $ okLabelGroups (mkBCtx pctx labs) labs $ = 'sorry;

@mmc-th local def labelGroup0: set = $ 0 $; -- TODO
prefix labelGroup0: $LG0$ prec max;
@mmc-th local def labelGroup (var: nat) (ls labs: set): set = $ 0 $; -- TODO
notation labelGroup (var: nat) (ls labs: set): set = ($LG($:85) var ($,$:0) ls ($);$:0) labs;

@mmc-th local def findLabels (labs: set) (var: nat) (ls: set): wff = $ F. $; -- TODO
@mmc-th theorem findLabels1: $ findLabels (LG(var, ls); labs) var ls $ = 'sorry;
@mmc-th theorem findLabelsS (h: $ findLabels labs var ls $):
  $ findLabels (LG(var1, ls1); labs) var ls $ = 'sorry;

--| `labels.and : labels -> labels -> labels`
@mmc-th local def labelA (A B: set): set = $ 0 $; -- TODO
infixl labelA: $+L$ prec 20;
--| `labels.one : option block_loc -> tctx -> labels`
@mmc-th local def label1 (x: nat) (tctx: set): set = $ 0 $; -- TODO

@mmc-th local def findLabel (ls: set) (x: nat) (A: set): wff = $ F. $; -- TODO
@mmc-th theorem findLabel_l (h: $ findLabel A x P $): $ findLabel (A +L B) x P $ = 'sorry;
@mmc-th theorem findLabel_r (h: $ findLabel B x P $): $ findLabel (A +L B) x P $ = 'sorry;
@mmc-th theorem findLabel1: $ findLabel (label1 x P) x P $ = 'sorry;

--| The empty context.
@mmc-th local def vctx0: set = $ 0 $; -- TODO

@mmc-th local def vctxA (A B: set): set = $ 0 $; -- TODO
infixl vctxA: $*V$ prec 20;

@mmc-th local def vProp (ty: set): set = $ 0 $; -- TODO

@mmc-th local def okVCtxPush (vctx1 A vctx2: set): wff = $ F. $; -- TODO

@mmc-th theorem okVCtxPush_1: $ okVCtxPush vctx0 A A $ = 'sorry;
@mmc-th theorem okVCtxPush_S:
  $ okVCtxPush vctx A (vctx *V A) $ = 'sorry;
@mmc-th theorem okVCtxPush_R
  (h: $ okVCtxPush vctx ty ((A *V B) *V C) $):
  $ okVCtxPush vctx ty (A *V (B *V C)) $ = 'sorry;

@mmc-th local def okVCtxGet (vctx A: set): wff = $ F. $; -- TODO

@mmc-th theorem okVCtxPush_get
  (h: $ okVCtxPush vctx A vctx2 $):
  $ okVCtxGet vctx2 A $ = 'sorry;

@mmc-th theorem okVCtxGet_R
  (h: $ okVCtxGet ((A *V B) *V C) ty $):
  $ okVCtxGet (A *V (B *V C)) ty $ = 'sorry;
@mmc-th theorem okVCtxGet_l (h: $ okVCtxGet A ty $): $ okVCtxGet (A *V B) ty $ = 'sorry;
@mmc-th theorem okVCtxGet_r (h: $ okVCtxGet B ty $): $ okVCtxGet (A *V B) ty $ = 'sorry;

--| Type context, or type state.
--| The first part is the logical context, where variables and their types are stored,
--| and the second part is the machine context where variables are assigned to memory locations.
--| We write it in such a way that `tctx` extends `vctx` and `mctx`,
--| so `vctx` extraction functions also work on `tctx`.
@mmc-th local def mkTCtx (vctx: set) (vctx_sz mctx: nat): set = $ 0 $; -- TODO

--| `ty_unit: ty`:
--| The type `()`, the unit type.
@mmc-th local def ty_unit: set = $ 0 $; -- TODO

--| `vVar: nat -> ty -> vctx`:
--| A variable record in a variable context. This asserts that `v_n: ty`.
@mmc-th local def vVar (n: nat) (ty: set): set = $ 0 $; -- TODO

--| `vHyp: ty -> vctx`:
--| A hypothesis, or unnamed variable. This asserts that `(): ty`.
@mmc-th local def vHyp (ty: set): set = $ 0 $; -- TODO

@mmc-th local def okPushVar (tctx ty tctx2: set): wff = $ F. $; -- TODO

@mmc-th theorem okPushVarI
  (h1: $ okVCtxPush vctx (vVar n ty) vctx2 $)
  -- TODO: something about mctx
  (h2: $ suc n = n2 $):
  $ okPushVar (mkTCtx vctx n mctx) ty (mkTCtx vctx2 n2 mctx2) $ = 'sorry;

@mmc-th local def okPushHyp (tctx ty tctx2: set): wff = $ F. $; -- TODO

@mmc-th theorem okPushHypI
  (h1: $ okVCtxPush vctx (vHyp ty) vctx2 $):
  $ okPushHyp (mkTCtx vctx n mctx) ty (mkTCtx vctx2 n mctx) $ = 'sorry;

@mmc-th local def okReadHyp (tctx ty: set): wff = $ F. $; -- TODO

@mmc-th theorem okReadHypTCtx
  (h1: $ okReadHyp vctx ty $):
  $ okReadHyp (mkTCtx vctx n mctx) ty $ = 'sorry;

@mmc-th theorem okReadHypI
  (h1: $ okVCtxGet vctx (vHyp ty) $):
  $ okReadHyp vctx ty $ = 'sorry;

@mmc-th theorem okReadHypVar
  (h1: $ okVCtxGet vctx (vVar v ty) $):
  $ okReadHyp vctx ty $ = 'sorry;

@mmc-th theorem okReadHyp_unit:
  $ okReadHyp tctx ty_unit $ = 'sorry;

local def okSP (bctx lctx: set): nat = $ 0 $; -- TODO
local def okFreeBytes (bctx lctx: set): nat = $ 0 $; -- TODO
local def soLayout (lctx: set): set = $ 0 $; -- TODO
local def soType (lctx: set): set = $ 0 $; -- TODO

@mmc-th local def ok0: set = $ 0 $; -- TODO

local def okCodeN (bctx lctx: set) (fr ip) =
$ s_ok
  (sn fr *s (
    main_layout (okContentN bctx) (okSP bctx lctx) ip (okFreeBytes bctx lctx) (soLayout lctx) *s
    soType lctx))
  (okResultN bctx) $;

local def okScopeN (bctx: set) (fr: nat): wff = $ F. $; -- TODO

local def contentAt (x l1 l2: nat): wff =
$ E. p (x = text_start + p /\ sublistAt p l1 l2) $;

local def okAsmd (bctx code: set) (x y: nat): wff =
$ E. s (y = x + len s /\ okStartN bctx + y e. u64 /\
  contentAt (okStartN bctx + x) (okContentN bctx) s /\ okStartN bctx <> s <> x e. code) $;

@mmc-th local def okWeak (bctx lctx1 lctx2: set): wff = $ F. $; -- TODO

@mmc-th theorem okWeak_id: $ okWeak bctx lctx lctx $ = 'sorry;

@mmc-th theorem okWeak_tr
  (h1: $ okWeak bctx lctx1 lctx2 $)
  (h2: $ okWeak bctx lctx2 lctx3 $):
  $ okWeak bctx lctx1 lctx3 $ = 'sorry;

@mmc-th local def okCode (bctx lctx1 code lctx2: set): wff =
$ A. x A. y A. fr (okAsmd bctx code x y -> okScopeN bctx fr ->
  okCodeN bctx lctx2 fr y -> okCodeN bctx lctx1 fr x) $;

@mmc-th theorem okCode_0: $ okCode bctx ok0 code ok0 $ = 'sorry;

@mmc-th theorem okCode_A
  (h1: $ okCode bctx lctx1 code1 lctx2 $)
  (h2: $ okCode bctx lctx2 code2 lctx3 $):
  $ okCode bctx lctx1 (code1 +asm code2) lctx3 $ = 'sorry;

@mmc-th theorem okCode_weak1
  (h1: $ okWeak bctx lctx1 lctx2 $)
  (h2: $ okCode bctx lctx2 code lctx3 $):
  $ okCode bctx lctx1 code lctx3 $ = 'sorry;

@mmc-th theorem okCode_weak2
  (h1: $ okCode bctx lctx1 code lctx2 $)
  (h2: $ okWeak bctx lctx2 lctx3 $):
  $ okCode bctx lctx1 code lctx3 $ = 'sorry;

@mmc-th local def okProc (gctx: set) (start: nat)
  (args ret: set) (clob: nat): wff = $ F. $; -- TODO

@mmc-th local def okPrologue (epi sp: nat) (lctx: set): set =
$ Sum (suc (epi <> sp)) (Snd lctx) $;

@mmc-th local def okAssembled (pctx: set) (code: set): wff =
$ E. p assembledN (okContentN pctx) (code @' p) $;

@mmc-th theorem okAssembledI
  (h: $ assembled gctx (asmProc start code) $):
  $ okAssembled (mkPCtx gctx pctx1) code $ = 'sorry;

@mmc-th theorem okAssembled_l
  (h1: $ okAssembled pctx (code1 +asm code2) $): $ okAssembled pctx code1 $ = 'sorry;

@mmc-th theorem okAssembled_r
  (h1: $ okAssembled pctx (code1 +asm code2) $): $ okAssembled pctx code2 $ = 'sorry;

@mmc-th local def buildProc (pctx args ret: set) (clob: nat) (lctx: set): wff = $ F. $; -- TODO

@mmc-th theorem okProcI
  (h1: $ okAssembled (mkPCtx gctx pctx1) (asmEntry start code) $)
  (h2: $ buildProc (mkPCtx gctx pctx1) args ret clob tctx $)
  (h3: $ okCode (mkBCtx (mkPCtx gctx pctx1) LG0) (okPrologue epiRet x0 tctx) code ok0 $):
  $ okProc gctx start args ret clob $ = 'sorry;

@mmc-th local def buildStart (pctx lctx: set): wff = $ F. $; -- TODO
@mmc-th local def okStart (gctx: set) (start: nat): wff = $ F. $; -- TODO

@mmc-th theorem okStartI
  (h1: $ okAssembled (mkPCtx gctx pctx1) (asmEntry start code) $)
  (h2: $ buildStart (mkPCtx gctx pctx1) tctx $)
  (h3: $ okCode (mkBCtx (mkPCtx gctx pctx1) LG0) tctx code ok0 $):
  $ okStart gctx start $ = 'sorry;

@mmc-th local def okBlock (bctx: set) (ip: nat) (lctx: set): wff = $ F. $; -- TODO

@mmc-th theorem okBlock_weak
  (h1: $ okWeak bctx lctx1 lctx2 $)
  (h2: $ okBlock bctx ip lctx2 $):
  $ okBlock bctx ip lctx1 $ = 'sorry;

@mmc-th theorem okBlockI
  (h1: $ okAssembled pctx (asmAt ip code) $)
  (h2: $ okCode (mkBCtx pctx L) lctx code ok0 $):
  $ okBlock (mkBCtx pctx L) ip lctx $ = 'sorry;

@mmc-th theorem okBlock0
  (h: $ okWeak (mkBCtx pctx L) lctx ok0 $):
  $ okBlock (mkBCtx pctx L) 0 lctx $ = 'sorry;

@mmc-th theorem okBlock_loop
  (h: $ okBlock (mkBCtx pctx (LG(var, ls); L)) ip lctx $):
  $ okBlock (mkBCtx pctx L) ip lctx $ = 'sorry;

@mmc-th local def okPushVariant (v: nat) (lctx1 lctx2: set): wff = $ F. $; -- TODO

@mmc-th theorem okBlock_label
  (h1: $ findLabels L var ls $)
  (h2: $ findLabel ls ip lctx1 $)
  (h3: $ okPushVariant var lctx1 lctx2 $):
  $ okBlock (mkBCtx pctx L) ip lctx2 $ = 'sorry;

@mmc-th local def okEpi (bctx: set) (epi sp_max: nat) (tctx: set): wff = $ F. $; -- TODO

@mmc-th theorem okPrologue_push (h: $ sp + x8 = sp2 $):
  $ okCode bctx
    (okPrologue epi sp tctx)
    (instPush (IRM_reg r))
    (okPrologue (epiPop r epi) sp2 tctx) $ =
'sorry;

@mmc-th theorem okPrologue_alloc
  (h1: $ okEpi bctx (epiFree n epi) n tctx $)
  (h2: $ sp + n = m $) (h3: $ m < ,{2 ^ 12} $):
  $ okCode bctx (okPrologue epi sp tctx) ,(instSub 'wSz64 RSP '(IRM_imm32 n)) tctx $ = 'sorry;

@mmc-th theorem okPrologue_alloc0
  (h1: $ okEpi bctx epi x0 tctx $)
  (h2: $ okCode bctx tctx code lctx2 $):
  $ okCode bctx (okPrologue epi sp tctx) code lctx2 $ = 'sorry;

@mmc-th local def getEpi (bctx ret: set) (epi: nat): wff = $ F. $; -- TODO

@mmc-th theorem getEpiI:
 $ getEpi (mkBCtx (mkPCtx gctx (mkPCtx1 start ret epi se)) labs) ret epi $ = 'sorry; -- TODO

@mmc-th local def checkRet (bctx tctx ret: set): wff = $ F. $; -- TODO

@mmc-th theorem checkRetI:
  $ checkRet bctx tctx ret $ = 'sorry; -- TODO

@mmc-th local def okEpilogue (epi: nat): set = $ 0 $; -- TODO

@mmc-th theorem okEpilogue_code
  (h1: $ getEpi bctx ret epi $)
  (h2: $ checkRet bctx tctx ret $)
  (h3: $ okCode bctx (okEpilogue epi) code tctx2 $):
  $ okCode bctx tctx code tctx2 $ =
'sorry;

@mmc-th theorem okEpilogue_free:
  $ okCode bctx (okEpilogue (epiFree n E)) ,(instAdd 'wSz64 RSP '(IRM_imm32 n)) (okEpilogue E) $ =
'sorry;

@mmc-th theorem okEpilogue_pop:
  $ okCode bctx (okEpilogue (epiPop r E)) (instPop r) (okEpilogue E) $ = 'sorry;

@mmc-th theorem okEpilogue_ret:
  $ okCode bctx (okEpilogue epiRet) instRet ok0 $ = 'sorry;

@mmc-th local def Loc_reg (r: hex): nat = $ 0 $; -- TODO
@mmc-th local def Loc_local (off: nat): nat = $ 0 $; -- TODO

@mmc-th local def spillslot (v: nat): nat = $ 0 $; -- TODO

@mmc-th local def okRead (tctx1: set) (src v: nat): wff = $ F. $; -- TODO
@mmc-th local def okWrite (tctx1: set) (dst v: nat) (tctx2: set): wff = $ F. $; -- TODO

@mmc-th theorem ok_movRR
  (h1: $ okRead tctx1 (Loc_reg src) v $)
  (h2: $ okWrite tctx1 (Loc_reg dst) v tctx2 $):
  $ okCode bctx tctx1 (instMov wSz64 (IRM_reg dst) (IRM_reg src)) tctx2 $ = 'sorry;

@mmc-th theorem ok_spill
  (h1: $ okRead tctx1 (Loc_reg src) v $)
  (h2: $ okWrite tctx1 (Loc_local off) (spillslot v) tctx2 $):
  $ okCode bctx tctx1 (instMov wSz64 (IRM_mem 0 ,RSP (posZ off)) (IRM_reg src)) tctx2 $ = 'sorry;

@mmc-th theorem ok_unspill
  (h1: $ okRead tctx1 (Loc_local off) (spillslot v) $)
  (h2: $ okWrite tctx1 (Loc_reg dst) v tctx2 $):
  $ okCode bctx tctx1 (instMov wSz64 (IRM_reg dst) (IRM_mem 0 ,RSP (posZ off))) tctx2 $ = 'sorry;

@mmc-th theorem ok_jump
  (h: $ okBlock bctx tgt tctx $):
  $ okCode bctx tctx (instJump tgt) ok0 $ = 'sorry;

@mmc-th local def withFlags (f: nat) (tctx: set): set = $ 0 $; -- TODO
@mmc-th local def invertCond (c d: hex): wff = $ F. $; -- TODO
@mmc-th local def flagCond (f: nat) (c: hex) (ty: set): wff = $ F. $; -- TODO
@mmc-th local def ty_not (ty: set): set = $ 0 $; -- TODO

@mmc-th theorem ok_jcc
  (h1: $ flagCond f c ty $)
  (h2: $ okPushHyp tctx ty tctx1 $)
  (h3: $ okPushHyp tctx (ty_not ty) tctx2 $)
  (h4: $ okBlock bctx tgt tctx1 $):
  $ okCode bctx (withFlags f tctx) (instJCC c tgt) tctx2 $ = 'sorry;

@mmc-th theorem ok_jcc_invert
  (h0: $ invertCond notc c $)
  (h1: $ flagCond f c ty $)
  (h2: $ okPushHyp tctx ty tctx1 $)
  (h3: $ okPushHyp tctx (ty_not ty) tctx2 $)
  (h4: $ okBlock bctx tgt tctx2 $):
  $ okCode bctx (withFlags f tctx) (instJCC notc tgt) tctx1 $ = 'sorry;

@mmc-th theorem ok_ud2: $ okCode bctx tctx1 instUD2 ok0 $ = 'sorry;

@mmc-th theorem ok_assert
  (h1: $ flagCond f c ty $)
  (h2: $ okPushHyp tctx ty tctx2 $)
  (h3: $ okBlock bctx tgt tctx2 $):
  $ okCode bctx (withFlags f tctx) (instAssert c tgt) ok0 $ = 'sorry;

@mmc-th local def okDefer (P A: set): set = $ 0 $; -- TODO

@mmc-th theorem okDeferI:
  $ okCode bctx tctx code (okDefer tctx code) $ = 'sorry;

@mmc-th theorem ok_exit
  (h1: $ okResult gctx T $)
  (h2: $ okReadHyp tctx T $):
  $ okCode (mkBCtx (mkPCtx gctx pctx1) labs)
    (okDefer (okDefer tctx
      (instImm wSz32 x0 (posZ ,0x3c)))
      (instImm wSz64 x7 (posZ x0)))
    instSysCall ok0 $ =
'sorry;
